package me.srikavin.fbla.game.ecs.component

import com.artemis.Component
import com.badlogic.gdx.physics.box2d.*
import me.srikavin.fbla.game.GdxArray

/**
 * A component containing the necessary properties to represent an entity as a physics object
 */
class PhysicsBody() : Component() {
    constructor(fixtureDefs: GdxArray<FixtureDef>, type: BodyDef.BodyType, density: Float, friction: Float, restitution: Float) : this() {
        this.fixtureDefs = fixtureDefs
        this.type = type
        this.density = density
        this.friction = friction
        this.restitution = restitution
    }

    /**
     * Will be autogenerated by the Physics System based on [fixtureDefs], [type], [shape], [density], [friction], [restitution]
     */
    lateinit var body: Body

    /**
     * Will be autogenerated by the Physics System based on [fixtureDefs]
     */
    lateinit var fixtures: GdxArray<Fixture>

    /**
     * Optional parameter to specify [FixtureDef]s. This overrides anything specified in [shape]
     */
    var fixtureDefs: GdxArray<FixtureDef> = GdxArray()

    var type: BodyDef.BodyType = BodyDef.BodyType.DynamicBody
    var shape: Shape = CircleShape().apply { radius = .5f }
    var density: Float = 1f
    var friction: Float = 0.9f
    var linearDamping: Float = 0f

    var isSensor: Boolean = false

    /**
     * The "bounciness" of the physics body
     */
    var restitution: Float = .1f
}